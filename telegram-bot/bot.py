#!/usr/bin/env python3
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ —Å–∏—Å—Ç–µ–º—ã "–ú–æ–∏ –¥–µ–ª–∞"
"""

import os
import json
import asyncio
from datetime import datetime
from pathlib import Path
from typing import List, Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes


class TodoBot:
    def __init__(self, token: str):
        self.token = token
        self.base_path = Path(__file__).parent.parent
        self.todos_path = self.base_path / "todos"
        try:
            print("Bot paths - Base: {}, Todos: {}, Exists: {}".format(
                str(self.base_path.resolve()), 
                str(self.todos_path.resolve()), 
                self.todos_path.exists()
            ))
            if self.todos_path.exists():
                files = list(self.todos_path.glob('current/*.md'))
                print("Current files found: {}".format(len(files)))
            else:
                print("Todos path does not exist!")
        except Exception as e:
            print("Debug error:", str(e))
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        keyboard = [
            [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏", callback_data="current")],
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="completed")],
            [InlineKeyboardButton("üìÅ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup
        )
    
    async def list_todos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"""
        todos = self._get_todos("current")
        
        if not todos:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á")
            return
            
        message = "üìã *–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:*\n\n"
        for i, todo in enumerate(todos, 1):
            message += f"{i}. {todo['title']}\n"
            if todo.get('status'):
                message += f"   –°—Ç–∞—Ç—É—Å: {todo['status']}\n"
            if todo.get('priority'):
                message += f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {todo['priority']}\n"
            message += "\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        current = len(self._get_todos("current"))
        completed = len(self._get_todos("completed"))
        projects = len(self._get_todos("projects"))
        
        message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üìã –¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á: {current}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {projects}\n"
            f"\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d')}"
        )
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        category = query.data
        print(f"Button clicked: {category}")
        todos = self._get_todos(category)
        print(f"Found {len(todos)} todos in category {category}")
        
        if not todos:
            await query.edit_message_text(f"üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            return
        
        titles = {
            "current": "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏",
            "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            "projects": "üìÅ –ü—Ä–æ–µ–∫—Ç—ã"
        }
        
        message = f"*{titles.get(category, category)}:*\n\n"
        for i, todo in enumerate(todos, 1):
            message += f"{i}. {todo['title']}\n"
            if todo.get('description'):
                message += f"   {todo['description'][:50]}...\n"
            message += "\n"
        
        await query.edit_message_text(message, parse_mode='Markdown')
    
    def _get_todos(self, category: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        todos = []
        category_path = self.todos_path / category
        
        print(f"Looking for todos in: {category_path}")
        print(f"Path exists: {category_path.exists()}")
        
        if not category_path.exists():
            print(f"Category path {category_path} does not exist!")
            return todos
        
        md_files = list(category_path.glob("*.md"))
        print(f"Found {len(md_files)} .md files: {md_files}")
        
        for file_path in md_files:
            print(f"Parsing file: {file_path}")
            todo = self._parse_todo_file(file_path)
            if todo:
                print(f"Parsed todo: {todo.get('title', 'No title')}")
                todos.append(todo)
            else:
                print(f"Failed to parse: {file_path}")
        
        print(f"Total todos in {category}: {len(todos)}")
        return todos
    
    def _parse_todo_file(self, file_path: Path) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ markdown —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–µ–π"""
        try:
            content = file_path.read_text(encoding='utf-8')
            lines = content.split('\n')
            
            todo = {
                'filename': file_path.name,
                'title': lines[0].strip('# ') if lines else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            }
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            for line in lines:
                if line.startswith('**–°—Ç–∞—Ç—É—Å:**'):
                    todo['status'] = line.split('**–°—Ç–∞—Ç—É—Å:**')[1].strip()
                elif line.startswith('**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**'):
                    todo['priority'] = line.split('**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:**')[1].strip()
                elif line.startswith('**–î–µ–¥–ª–∞–π–Ω:**'):
                    todo['deadline'] = line.split('**–î–µ–¥–ª–∞–π–Ω:**')[1].strip()
            
            # –ò–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ
            if '## –û–ø–∏—Å–∞–Ω–∏–µ' in content:
                desc_start = content.find('## –û–ø–∏—Å–∞–Ω–∏–µ') + len('## –û–ø–∏—Å–∞–Ω–∏–µ')
                desc_end = content.find('##', desc_start)
                if desc_end == -1:
                    desc_end = len(content)
                todo['description'] = content[desc_start:desc_end].strip()
            
            return todo
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
            return None
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = Application.builder().token(self.token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("list", self.list_todos))
        app.add_handler(CommandHandler("stats", self.stats))
        
        # –ö–Ω–æ–ø–∫–∏
        app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ó–∞–ø—É—Å–∫
        app.run_polling()


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not TOKEN:
        config_path = Path(__file__).parent / "config.json"
        if config_path.exists():
            with open(config_path) as f:
                config = json.load(f)
                TOKEN = config.get("token")
    
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ config.json –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä config.json:")
        print(json.dumps({"token": "YOUR_BOT_TOKEN"}, indent=2))
        exit(1)
    
    bot = TodoBot(TOKEN)
    print("Bot zapuschen...")
    bot.run()